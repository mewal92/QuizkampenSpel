Index: src/QuizkampenClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.InetAddress;\r\nimport java.net.Socket;\r\nimport java.net.UnknownHostException;\r\n\r\npublic class QuizkampenClient implements ActionListener {\r\n    JFrame frame = new JFrame(\"Quizkampen\");\r\n    JPanel basePanel = new JPanel();\r\n    JLabel title = new JLabel(\"Quizkampen! Enter name:\");\r\n    JTextField nameField = new JTextField(\"\",10);\r\n    JLabel messageFromGameServer = new JLabel(\"\");\r\n    int port = 44444;\r\n    InetAddress ip = InetAddress.getLocalHost();\r\n\r\n    public QuizkampenClient() throws UnknownHostException {\r\n        frame.setSize(500,200);\r\n        frame.add(basePanel);\r\n        basePanel.add(title);\r\n        basePanel.add(nameField);\r\n        basePanel.add(messageFromGameServer);\r\n        frame.setVisible(true);\r\n        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\r\n\r\n        try(Socket sock = new Socket(ip, port)){\r\n            PrintWriter out = new PrintWriter(sock.getOutputStream(),true);\r\n            BufferedReader in = new BufferedReader(new InputStreamReader(sock.getInputStream()));\r\n            nameField.addActionListener(e -> out.println(nameField.getText()));\r\n            String serverResponse;\r\n            while((serverResponse = in.readLine()) != null){\r\n                messageFromGameServer.setText(serverResponse);\r\n                messageFromGameServer.revalidate();\r\n            }\r\n        }\r\n        catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n    public static void main(String[] args) throws UnknownHostException {\r\n        new QuizkampenClient();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/QuizkampenClient.java b/src/QuizkampenClient.java
--- a/src/QuizkampenClient.java	(revision fff25499a505ea6fc66cf6ea4f00f19d2efa3270)
+++ b/src/QuizkampenClient.java	(date 1669237456719)
@@ -1,53 +1,77 @@
+import javax.imageio.ImageIO;
 import javax.swing.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.io.PrintWriter;
+import javax.swing.border.EmptyBorder;
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.io.*;
 import java.net.InetAddress;
 import java.net.Socket;
-import java.net.UnknownHostException;
 
-public class QuizkampenClient implements ActionListener {
-    JFrame frame = new JFrame("Quizkampen");
+
+public class QuizkampenClient {
     JPanel basePanel = new JPanel();
-    JLabel title = new JLabel("Quizkampen! Enter name:");
-    JTextField nameField = new JTextField("",10);
-    JLabel messageFromGameServer = new JLabel("");
+    JLabel title = new JLabel("Välkommen till Quizkampen!");
+    JLabel title2 = new JLabel("Skriv ditt namn för att börja spela: ");
+    JButton play = new JButton("Starta spel");
+    JTextField nameField = new JTextField("", 10);
+    JLabel messageFromGameServer = new JLabel();
+    BufferedImage backgroundImage;
     int port = 44444;
     InetAddress ip = InetAddress.getLocalHost();
 
-    public QuizkampenClient() throws UnknownHostException {
-        frame.setSize(500,200);
-        frame.add(basePanel);
+
+    public QuizkampenClient() throws IOException {
+        basePanel.setLayout(new GridLayout(4, 1));
+        basePanel.setBorder(new EmptyBorder(100, 100, 20, 20));
+        title.setFont(new Font("Tahoma", 1, 23));
         basePanel.add(title);
+        basePanel.add(title2);
         basePanel.add(nameField);
-        basePanel.add(messageFromGameServer);
-        frame.setVisible(true);
-        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+        basePanel.setBackground(new Color(0, 0, 0, 0));
+        setFrame();
+
 
-        try(Socket sock = new Socket(ip, port)){
-            PrintWriter out = new PrintWriter(sock.getOutputStream(),true);
+        try (Socket sock = new Socket(ip, port)) {
+            PrintWriter out = new PrintWriter(sock.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(sock.getInputStream()));
             nameField.addActionListener(e -> out.println(nameField.getText()));
             String serverResponse;
-            while((serverResponse = in.readLine()) != null){
+            while ((serverResponse = in.readLine()) != null) {
                 messageFromGameServer.setText(serverResponse);
-                messageFromGameServer.revalidate();
+                basePanel.remove(title2);
+                basePanel.remove(nameField);
+                basePanel.add(messageFromGameServer);
+                basePanel.add(play);
+                basePanel.revalidate();
+
             }
-        }
-        catch(Exception e){
+
+        } catch (Exception e) {
             e.printStackTrace();
         }
 
     }
-    public static void main(String[] args) throws UnknownHostException {
+
+    private void setFrame() {
+        try {
+            JFrame frame = new JFrame("Quizkampen");
+            backgroundImage = ImageIO.read(new File("background.jpg"));
+            frame.setContentPane(new JLabel(new ImageIcon(backgroundImage)));
+            frame.setLayout(new FlowLayout());
+            frame.add(basePanel);
+            frame.setSize(800, 530);
+            frame.setVisible(true);
+            frame.setLocationRelativeTo(null);
+            frame.setResizable(false);
+            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static void main(String[] args) throws IOException {
         new QuizkampenClient();
     }
 
-
-    @Override
-    public void actionPerformed(ActionEvent e) {
-
-    }
 }
Index: src/QuizkampenServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\n\r\npublic class QuizkampenServer extends Thread{\r\n    Socket player1Socket;\r\n    Socket player2Socket;\r\n    Settings settings = new Settings();\r\n    boolean gameActive = false;\r\n\r\n    public QuizkampenServer(Socket player1, Socket player2) throws IOException {\r\n        player1Socket = player1;\r\n        player2Socket = player2;\r\n\r\n    }\r\n      public void run(){\r\n        try(PrintWriter outPlayer1 = new PrintWriter(player1Socket.getOutputStream(), true);\r\n            PrintWriter outPlayer2 = new PrintWriter(player2Socket.getOutputStream(), true);\r\n            BufferedReader inPlayer1 = new BufferedReader(new InputStreamReader(player1Socket.getInputStream()));\r\n            BufferedReader inPlayer2 = new BufferedReader(new InputStreamReader(player2Socket.getInputStream()))){\r\n            String player1UserName = inPlayer1.readLine();\r\n            String player2UserName = inPlayer2.readLine();\r\n            outPlayer1.println(\"Välkommen \" + player1UserName+\". Du kommer att spela mot \"+player2UserName+\"!\");\r\n            outPlayer2.println(\"Välkommen \" + player2UserName+\". Du kommer att spela mot \"+player1UserName+\"!\");\r\n            gameActive = true;\r\n            //Hämta antal omgångar och frågor\r\n            settings.getRounds();\r\n            settings.getQuestions();\r\n            //Låt player1 välja kategori.\r\n            while(inPlayer1.readLine().equals(\"startPressed\")){\r\n                outPlayer1.println(\"SETCATEGORY\");\r\n            }\r\n\r\n        }catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\npublic static void main(String[] args) throws IOException {\r\n\r\n}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/QuizkampenServer.java b/src/QuizkampenServer.java
--- a/src/QuizkampenServer.java	(revision fff25499a505ea6fc66cf6ea4f00f19d2efa3270)
+++ b/src/QuizkampenServer.java	(date 1669237175311)
@@ -15,7 +15,10 @@
         player2Socket = player2;
 
     }
-      public void run(){
+
+    public QuizkampenServer() {}
+
+    public void run(){
         try(PrintWriter outPlayer1 = new PrintWriter(player1Socket.getOutputStream(), true);
             PrintWriter outPlayer2 = new PrintWriter(player2Socket.getOutputStream(), true);
             BufferedReader inPlayer1 = new BufferedReader(new InputStreamReader(player1Socket.getInputStream()));
@@ -31,6 +34,8 @@
             //Låt player1 välja kategori.
             while(inPlayer1.readLine().equals("startPressed")){
                 outPlayer1.println("SETCATEGORY");
+                outPlayer1.println();
+                new GameProtocol();
             }
 
         }catch (IOException e) {
@@ -38,6 +43,6 @@
         }
     }
 public static void main(String[] args) throws IOException {
-
+new QuizkampenServer();
 }
 }
\ No newline at end of file
Index: src/GameProtocol.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class GameProtocol extends JFrame implements ActionListener {\r\n    JFrame frame = new JFrame(\"Quizkampen\");\r\n    BufferedImage backgroundImage = ImageIO.read(new File(\"background.jpg\"));\r\n    JPanel basePanel = new JPanel();\r\n    JLabel chooseCategory = new JLabel(\"Välj en kategori\");\r\n    JButton category1 = new JButton(\"Film\");\r\n    JButton category2 = new JButton(\"Musik\");\r\n    JButton category3 = new JButton(\"Java-kunskap\");\r\n    JButton category4 = new JButton(\"Övrigt\");\r\n\r\n    public GameProtocol() throws IOException {\r\n        frame.setContentPane(new JLabel(new ImageIcon(backgroundImage)));\r\n        frame.add(basePanel);\r\n        frame.setSize(800, 530);\r\n        frame.setVisible(true);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setResizable(false);\r\n        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\r\n\r\n    }\r\n\r\n    public void setChooseCategoryGui(){\r\n        basePanel.setLayout(new GridLayout(1,4));\r\n        basePanel.add(category1);\r\n        basePanel.add(category2);\r\n        basePanel.add(category3);\r\n        basePanel.add(category4);\r\n        basePanel.add(chooseCategory);\r\n        revalidate();\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n    }\r\n    public static void main(String[] args) throws IOException {\r\n        new GameProtocol().setChooseCategoryGui();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameProtocol.java b/src/GameProtocol.java
--- a/src/GameProtocol.java	(revision fff25499a505ea6fc66cf6ea4f00f19d2efa3270)
+++ b/src/GameProtocol.java	(date 1669237175277)
@@ -5,46 +5,66 @@
 import java.awt.event.ActionListener;
 import java.awt.image.BufferedImage;
 import java.io.File;
-import java.io.IOException;
+import java.io.FileNotFoundException;
 
 
 public class GameProtocol extends JFrame implements ActionListener {
-    JFrame frame = new JFrame("Quizkampen");
-    BufferedImage backgroundImage = ImageIO.read(new File("background.jpg"));
+    BufferedImage backgroundImage;
     JPanel basePanel = new JPanel();
+    JPanel scoreboardPanel;
+    JLabel question;
     JLabel chooseCategory = new JLabel("Välj en kategori");
-    JButton category1 = new JButton("Film");
-    JButton category2 = new JButton("Musik");
-    JButton category3 = new JButton("Java-kunskap");
-    JButton category4 = new JButton("Övrigt");
+    JButton category1 = new JButton("Djur");
+    JButton category2 = new JButton("Historia");
+    JButton category3= new JButton("Musik");
+    JButton category4 = new JButton("Film");
+    JButton answerButtons;
+
+
+
+    public GameProtocol() {
+        basePanel.setLayout(new GridLayout(5,1));
+        basePanel.add(chooseCategory);
+        category1.setSize(100,70);
+        basePanel.add(category1);
+        category2.setSize(100,70);
+        basePanel.add(category2);
+        category3.setSize(100,70);
+        basePanel.add(category3);
+        category4.setSize(100,70);
+        basePanel.add(category4);
+        getFrame();
+    }
 
-    public GameProtocol() throws IOException {
-        frame.setContentPane(new JLabel(new ImageIcon(backgroundImage)));
-        frame.add(basePanel);
-        frame.setSize(800, 530);
-        frame.setVisible(true);
-        frame.setLocationRelativeTo(null);
-        frame.setResizable(false);
-        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+
+    private void getFrame() {
+        try {
+            JFrame frame = new JFrame("Quizkampen");
+            backgroundImage = ImageIO.read(new File("background.jpg"));
+            frame.setContentPane(new JLabel(new ImageIcon(backgroundImage)));
+            frame.add(basePanel);
+            frame.setLayout(new FlowLayout());
+            frame.setSize(800, 530);
+            frame.setVisible(true);
+            frame.setLocationRelativeTo(null);
+            frame.setResizable(false);
+            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
 
+        } catch (Exception e) {
+        }
     }
 
-    public void setChooseCategoryGui(){
-        basePanel.setLayout(new GridLayout(1,4));
-        basePanel.add(category1);
-        basePanel.add(category2);
-        basePanel.add(category3);
-        basePanel.add(category4);
-        basePanel.add(chooseCategory);
-        revalidate();
-        repaint();
+
+    public static void main(String[] args) {
+        GameProtocol gp = new GameProtocol();
     }
+
 
     @Override
     public void actionPerformed(ActionEvent e) {
+        if (e.getSource() == category1) {
+            new Questions();
+        }
 
     }
-    public static void main(String[] args) throws IOException {
-        new GameProtocol().setChooseCategoryGui();
-    }
-}
\ No newline at end of file
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"17fe8b5c-9237-4f7b-a2b4-a663334235bf\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"ServerStruktur\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"ServerStruktur\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Hu00ucNxnURgt22zxsXoabXbjq\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.QuizkampenClient\">\r\n    <configuration name=\"GameServerListener\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"GameServerListener\" />\r\n      <module name=\"QuizkampenSpel\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"QuizkampenClient\" type=\"Application\" factoryName=\"Application\" singleton=\"false\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"QuizkampenClient\" />\r\n      <module name=\"QuizkampenSpel\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.GameServerListener\" />\r\n      <item itemvalue=\"Application.QuizkampenClient\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.QuizkampenClient\" />\r\n        <item itemvalue=\"Application.GameServerListener\" />\r\n        <item itemvalue=\"Application.QuizkampenClient\" />\r\n        <item itemvalue=\"Application.GameServerListener\" />\r\n        <item itemvalue=\"Application.QuizkampenClient\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"17fe8b5c-9237-4f7b-a2b4-a663334235bf\" name=\"Changes\" comment=\"\" />\r\n      <created>1669119449433</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669119449433</updated>\r\n    </task>\r\n    <task id=\"LOCAL−00001\" summary=\"Server som matchar två spelare i taget för en ny spelomgång.\">\r\n      <created>1669121771786</created>\r\n      <option name=\"number\" value=\"LOCAL−00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL−00001\" />\r\n      <updated>1669121771786</updated>\r\n    </task>\r\n    <task id=\"LOCAL−00002\" summary=\"Funkar nu även för flera par samtidigt.Adderat run-metod i QuizkampenServer.\">\r\n      <created>1669125562754</created>\r\n      <option name=\"number\" value=\"LOCAL−00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL−00002\" />\r\n      <updated>1669125562754</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Server som matchar två spelare i taget för en ny spelomgång.\" />\r\n    <MESSAGE value=\"Funkar nu även för flera par samtidigt.Adderat run-metod i QuizkampenServer.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Funkar nu även för flera par samtidigt.Adderat run-metod i QuizkampenServer.\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fff25499a505ea6fc66cf6ea4f00f19d2efa3270)
+++ b/.idea/workspace.xml	(date 1669237469793)
@@ -1,7 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
-    <list default="true" id="17fe8b5c-9237-4f7b-a2b4-a663334235bf" name="Changes" comment="" />
+    <list default="true" id="17fe8b5c-9237-4f7b-a2b4-a663334235bf" name="Changes" comment="initial">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GameProtocol.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GameProtocol.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/QuizkampenClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/QuizkampenClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/QuizkampenServer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/QuizkampenServer.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -13,7 +21,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="ServerStruktur" />
+        <entry key="$PROJECT_DIR$" value="initialGUIversion" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -27,10 +35,15 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">
-    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/melin/IdeaProjects/QuizkampenSpel&quot;
+  }
+}</component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\melin\IdeaProjects\QuizkampenSpel" />
+    </key>
   </component>
   <component name="RunManager" selected="Application.QuizkampenClient">
     <configuration name="GameServerListener" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
@@ -42,22 +55,30 @@
     </configuration>
     <configuration name="QuizkampenClient" type="Application" factoryName="Application" singleton="false" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="QuizkampenClient" />
+      <module name="QuizkampenSpel" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="QuizkampenServer" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="QuizkampenServer" />
       <module name="QuizkampenSpel" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
     <list>
+      <item itemvalue="Application.QuizkampenServer" />
       <item itemvalue="Application.GameServerListener" />
       <item itemvalue="Application.QuizkampenClient" />
     </list>
     <recent_temporary>
       <list>
         <item itemvalue="Application.QuizkampenClient" />
+        <item itemvalue="Application.QuizkampenServer" />
         <item itemvalue="Application.GameServerListener" />
         <item itemvalue="Application.QuizkampenClient" />
         <item itemvalue="Application.GameServerListener" />
-        <item itemvalue="Application.QuizkampenClient" />
       </list>
     </recent_temporary>
   </component>
